name: Publish Python Package

on:
  push:
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.7.1"

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install

      - name: Run tests
        run: |
          poetry run pytest

      - name: Configure Git
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Bump version and publish
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the current version
          CURRENT_VERSION=$(poetry version -s)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Get the last commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          # Determine version bump type based on commit message
          if [[ $COMMIT_MSG == feat:* ]]; then
            # Increment minor version
            if [ "$MINOR" -eq 9 ]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            else
              MINOR=$((MINOR + 1))
              PATCH=0
            fi
          elif [[ $COMMIT_MSG == fix:* ]]; then
            # Increment patch version
            if [ "$PATCH" -eq 9 ]; then
              if [ "$MINOR" -eq 9 ]; then
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
              else
                MINOR=$((MINOR + 1))
                PATCH=0
              fi
            else
              PATCH=$((PATCH + 1))
            fi
          fi
          
          if [[ $COMMIT_MSG == feat:* ]] || [[ $COMMIT_MSG == fix:* ]]; then
            # Create a new branch
            git checkout -b version-bump-$(date +%Y%m%d-%H%M%S)
            
            # Set new version
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
            poetry version "$NEW_VERSION"
            
            # Update version in pyproject.toml commitizen section
            sed -i.bak "s/version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml
            rm pyproject.toml.bak
            
            echo "New version: $NEW_VERSION"
            poetry build
            
            # Commit changes
            git commit -am "Bump version to $NEW_VERSION"
            
            # Push branch and create PR
            git push origin HEAD
            
            # Create Pull Request
            gh pr create --title "Bump version to $NEW_VERSION" \
                        --body "Automated version bump to $NEW_VERSION based on commit type: ${COMMIT_MSG%%:*}"
            
            # Publish to PyPI
            poetry publish -u "__token__" -p "$PYPI_TOKEN"
          else
            echo "No version bump needed. Commit type is not feat: or fix:"
          fi

name: Publish Python Package

on:
  push:
    branches:
      - main  # Or master, whichever is your main branch

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Important for full commit history

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"  # Or your preferred Python version

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.7.1" # Or the version you want to use

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install

      - name: Run tests
        run: |
          poetry run pytest  # Assumes you use pytest

      - name: Bump version and publish
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' # or master
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          # Check for changes that warrant a release, using conventional commits
          if git log --oneline -1 --grep="^feat\|^fix\|^refactor\|^perf\|^ci\|^build\|^chore\|^docs\|^style\|^test" --count > 0; then
            # Determine the next version (patch, minor, or major)
            poetry version patch # or minor or major
            NEW_VERSION=$(poetry version -s)
            echo "New version: $NEW_VERSION"
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
            git commit -am "Bump version to $NEW_VERSION"
            git tag $NEW_VERSION
            poetry publish -u "__token__" -p "$PYPI_TOKEN"
            git push --follow-tags
          else
            echo "No significant changes detected. Skipping version bump and release."
          fi
